package name.martingeisse.mahdl.common;

import com.google.common.collect.ImmutableList;
import name.martingeisse.mahdl.common.processor.definition.ModuleDefinition;
import name.martingeisse.mahdl.common.processor.definition.ModulePort;
import name.martingeisse.mahdl.common.processor.definition.Named;
import name.martingeisse.mahdl.common.processor.definition.PortDirection;
import name.martingeisse.mahdl.common.processor.type.DataTypeProcessor;
import name.martingeisse.mahdl.common.processor.type.ProcessedDataType;
import name.martingeisse.mahdl.input.cm.*;

import java.util.ArrayList;
import java.util.List;

/**
 * The environment must return this for every dependency module that gets used by the current module. It represents,
 * on a high level, the contents of the metadata JSON file that is generated by the compiler. We do not return JSON
 * though since the same information might be stored in different shape, for example if the dependency is being
 * compiled at the same time as the current module -- the JSON file has not been written at that time.
 */
public final class ModuleApi {

    private final ModuleIdentifier moduleIdentifier;
    private final boolean isNative;
    private final ImmutableList<Port> ports;

    public ModuleApi(ModuleIdentifier moduleIdentifier, boolean isNative, ImmutableList<Port> ports) {
        this.moduleIdentifier = moduleIdentifier;
        this.isNative = isNative;
        this.ports = ports;
    }

    public ModuleApi(Module cmModule) {
        this.moduleIdentifier = new ModuleIdentifier(cmModule.getModuleName());
        this.isNative = cmModule.getNativeness().getIt() != null;

        List<Port> ports = new ArrayList<>();
        for (PortDefinitionGroup untypedPortDefinitionGroup : cmModule.getPortDefinitionGroups().getAll()) {
            if (untypedPortDefinitionGroup instanceof PortDefinitionGroup_Valid) {
                PortDefinitionGroup_Valid portDefinitionGroup = (PortDefinitionGroup_Valid) untypedPortDefinitionGroup;

                // extract direction
                name.martingeisse.mahdl.common.processor.definition.PortDirection direction;
                if (portDefinitionGroup.getDirection() instanceof PortDirection_In) {
                    direction = name.martingeisse.mahdl.common.processor.definition.PortDirection.IN;
                } else if (portDefinitionGroup.getDirection() instanceof PortDirection_Out) {
                    direction = name.martingeisse.mahdl.common.processor.definition.PortDirection.OUT;
                } else {
                    continue;
                }

                // extract type
                ProcessedDataType type = DataTypeProcessor.ISOLATED.processDataType(portDefinitionGroup.getDataType());

                // extract names and add ports
                for (PortDefinition portDefinition : portDefinitionGroup.getDefinitions().getAll()) {
                    String name = portDefinition.getIdentifier().getText();
                    if (name != null) {
                        ports.add(new Port(direction, type, name));
                    }
                }
            }
        }
        this.ports = ImmutableList.copyOf(ports);
    }

    public ModuleApi(ModuleDefinition moduleDefinition) {
        this.moduleIdentifier = moduleDefinition.getIdentifier();
        this.isNative = moduleDefinition.isNative();

        List<Port> ports = new ArrayList<>();
        for (Named definition : moduleDefinition.getDefinitions().values()) {
            if (definition instanceof ModulePort) {
                ModulePort modulePort = (ModulePort)definition;
                ports.add(new Port(modulePort.getDirection(), modulePort.getProcessedDataType(), modulePort.getName()));
            }
        }
        this.ports = ImmutableList.copyOf(ports);
    }

    public ModuleIdentifier getModuleIdentifier() {
        return moduleIdentifier;
    }

    public boolean isNative() {
        return isNative;
    }

    public ImmutableList<Port> getPorts() {
        return ports;
    }

    public static final class Port {

        private final PortDirection direction;
        private final ProcessedDataType type;
        private final String name;

        public Port(PortDirection direction, ProcessedDataType type, String name) {
            this.direction = direction;
            this.type = type;
            this.name = name;
        }

        public PortDirection getDirection() {
            return direction;
        }

        public ProcessedDataType getType() {
            return type;
        }

        public String getName() {
            return name;
        }

    }

}
