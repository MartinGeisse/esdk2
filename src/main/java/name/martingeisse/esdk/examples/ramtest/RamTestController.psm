
    ; x in s3..s0
    ; i in s7..s4

    ; x = 9;
    LOAD s3, 00
    LOAD s2, 00
    LOAD s1, 00
    LOAD s0, 09

    ; i = 0
    LOAD s7, 00
    LOAD s6, 00
    LOAD s5, 00
    LOAD s4, 00

    ; while (i < 8M)
writeLoop:
    COMPARE s5, 01
    JUMP Z, writePhaseFinished

    ; show i >> 20 on LEDs
    LOAD sA, s6
    SR0 sA
    SR0 sA
    SR0 sA
    SR0 sA
    OUTPUT sA, 08

    ; memory[i] = x;
    OUTPUT s4, 10
    OUTPUT s5, 11
    OUTPUT s6, 12
    OUTPUT s7, 13
    OUTPUT s0, 20
    OUTPUT s1, 21
    OUTPUT s2, 22
    OUTPUT s3, 23
    LOAD sA, 01
    OUTPUT sA, 80
writeLoopDelayLoop:
    INPUT sA, 80
    COMPARE sA, 01
    JUMP Z, writeLoopDelayLoop

    ; x = 5 * x + 1;
    LOAD sC, s0
    LOAD sD, s1
    LOAD sE, s2
    LOAD sF, s3
    ADD s0, s0
    ADDCY s1, s1
    ADDCY s2, s2
    ADDCY s3, s3
    ADD s0, s0
    ADDCY s1, s1
    ADDCY s2, s2
    ADDCY s3, s3
    ADD s0, sC
    ADDCY s1, sD
    ADDCY s2, sE
    ADDCY s3, sF
    ADD s0, 01
    ADDCY s1, 00
    ADDCY s2, 00
    ADDCY s3, 00

    ; i++
    ADD s4, 01
    ADDCY s5, 00
    ADDCY s6, 00
    ADDCY s7, 00

    ; end of while
    JUMP writeLoop

writePhaseFinished:

; ---------------------------------------------------------------------------------------------------------------------

    ; x = 9;
    LOAD s3, 00
    LOAD s2, 00
    LOAD s1, 00
    LOAD s0, 09

    ; i = 0
    LOAD s7, 00
    LOAD s6, 00
    LOAD s5, 00
    LOAD s4, 00

    ; while (i < 8M)
readLoop:
    COMPARE s5, 01
    JUMP Z, success

    ; show i >> 20 on LEDs
    LOAD sA, s6
    SR0 sA
    SR0 sA
    SR0 sA
    SR0 sA
    OUTPUT sA, 08

    ; assert(memory[i] == x)
    OUTPUT s4, 10
    OUTPUT s5, 11
    OUTPUT s6, 12
    OUTPUT s7, 13
    LOAD sA, 00
    OUTPUT sA, 80
readLoopDelayLoop:
    INPUT sA, 80
    COMPARE sA, 01
    JUMP Z, readLoopDelayLoop
    INPUT sC, 40
    INPUT sD, 41
    INPUT sE, 42
    INPUT sF, 43
    COMPARE sC, s0
    JUMP NZ, failure
    COMPARE sD, s1
    JUMP NZ, failure
    COMPARE sE, s2
    JUMP NZ, failure
    COMPARE sF, s3
    JUMP NZ, failure

    ; x = 5 * x + 1;
    LOAD sC, s0
    LOAD sD, s1
    LOAD sE, s2
    LOAD sF, s3
    ADD s0, s0
    ADDCY s1, s1
    ADDCY s2, s2
    ADDCY s3, s3
    ADD s0, s0
    ADDCY s1, s1
    ADDCY s2, s2
    ADDCY s3, s3
    ADD s0, sC
    ADDCY s1, sD
    ADDCY s2, sE
    ADDCY s3, sF
    ADD s0, 01
    ADDCY s1, 00
    ADDCY s2, 00
    ADDCY s3, 00

    ; i++
    ADD s4, 01
    ADDCY s5, 00
    ADDCY s6, 00
    ADDCY s7, 00

    ; end of while
    JUMP readLoop

; ---------------------------------------------------------------------------------------------------------------------

success:
    LOAD s0, 11
successLoop:
    OUTPUT s0, 08
    RL s0
    CALL finalWait
    JUMP successLoop

failure:
    LOAD s0, 00
failureLoop:
    OUTPUT s0, 08
    LOAD s1, s0
    LOAD s0, FF
    SUB s0, s1
    CALL finalWait
    JUMP failureLoop

finalWait:
    LOAD s1, 02
finalWait1:
	SUB s1, 01
	RETURN Z
	LOAD s2, 00
finalWait2:
	SUB s2, 01
	JUMP Z, finalWait1
	LOAD s3, 10
	TODO
	INPUT s4, 00
	TEST s4, FF
	JUMP Z, finalWait3
	LOAD s3, 03
finalWait3:
	SUB s3, 01
	JUMP Z, finalWait2
	JUMP finalWait3
