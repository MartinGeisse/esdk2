
Picoblaze in ESDK:

- simulation driver: could be an RtlClockNetwork or high-level events. With high-level events, no RTL signal
    interfaces can be simulated but simulation may be faster (but I don't know how much faster -- should test that
    first). The high-level driver may be unnecessary if the speedup is less than 2x. I don't think there are other
    advantages to a high-level driver. RtlClockNetwork driver is needed in any case, so build that first.

- reset:
    - high level reset interface: is a method that can be called
    - RTL reset interface: is a separate RTL object that calls that method.
    --> no simulation cycles wasted if reset is irrelevant during run-time

- interrupt
    - like reset

- instruction memory interface:
    - RTL interface using signals; provides getter for the address signal and setter for the instruction signal
    - high level interface; does not provide ahead-of-time address; works using a callback

- I/O interface:
    - RTL interface using signals; provides getters for output signals and setters for input signals.
    - high level interface; does not provide ahead-of-time I/O addresses like the RTL interface does; allows to
        set read/write callbacks.

---------------------------------------------------------------------------------------------------

Instruction interface, I/O interface: probably two different handlers aren't needed. If the simulation simulates
the two-clocks-per-instruction anyway, then the ahead-of-time signals cannot be handled by a handler anway; they
have to be available as RtlSignals right after loading the instruction. Since RtlSignals are just getters at the
Java level, this means they are getters that read certain bits from the instruction register, which is possible at
no extra cost. So just provide these signals -- the user can ignore them if not needed. Any external action at RTL
level in reaction to INPUT/OUTPUT is triggered by the clock signal, not the Picoblaze. Only high-level actions
are triggered by the Picoblaze. So provide a way to set a high-level callback, and do nothing if none is set.

