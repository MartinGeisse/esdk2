module name.martingeisse.esdk.riscv.orange_crab.Heos;

interface {
    in clock clk;

    out bit ledRn, ledGn, ledBn;

    out vector[3] r, g, b;
    out bit hsync, vsync;

    in bit ps2clk, ps2data;

    in clock signalLogClock;
    in bit signalLogEnable;
    in vector[32] signalLogData;

}

// heartbeat LED
register vector[24] counter = 0;
do (clk) {
    counter = counter + 24d1;
}
do (*) {
    ledRn = counter[23];
    ledGn = 1;
    ledBn = 1;
}

// CPU
name.martingeisse.esdk.riscv.rtl.Multicycle cpu;

// peripherals
name.martingeisse.esdk.riscv.orange_crab.TextDisplayController displayController;
name.martingeisse.esdk.riscv.orange_crab.KeyboardController keyboardController;
name.martingeisse.esdk.riscv.orange_crab.SignalLogger signalLogger;
name.martingeisse.esdk.riscv.orange_crab.ddr3.RamController ramController;

// bus decoder: high-priority devices
signal bit internalMemorySelected = cpu.busWordAddress[29:22] == 8d0;
signal bit displaySelected = cpu.busWordAddress[29:22] == 8d1;

// bus decoder: low-priority devices
signal bit lowPriorityDevicesSelected = cpu.busWordAddress[29:28] == 2b01;
signal bit keyboardSelected = cpu.busWordAddress[29:22] == 8d64;
signal bit gpioSelected = cpu.busWordAddress[29:22] == 8d65;
signal bit signalLoggerSelected = cpu.busWordAddress[29:22] == 8d66;

// bus decoder: low-priority devices delay logic
signal vector[32] lowPriorityDevicesImmediateReadData;
signal bit lowPriorityDevicesImmediateAcknowledge;
register vector[32] lowPriorityDevicesReadDataRegister;
register bit lowPriorityDevicesDelayCycleRegister = 0;

// bus and peripherals wiring
do (*) {

    // data interface
    if (cpu.busWordAddress[29]) {

        // big RAM
        cpu.busReadData = ramController.busResponseReadData;
        cpu.busAcknowledge = ramController.busRequestAcknowledge;

    } else if (cpu.busWordAddress[28]) {

        // low-priority devices
        cpu.busReadData = lowPriorityDevicesReadDataRegister;
        cpu.busAcknowledge = lowPriorityDevicesDelayCycleRegister;

    } else {

        // high-priority devices
        cpu.busReadData = switch (cpu.busWordAddress[27:22]) {
            case 6d0: memoryReadData
            case 6d1: 32d0 // display
            default: 32d0
        };
        cpu.busAcknowledge = switch (cpu.busWordAddress[27:22]) {
            case 6d0: cpu.busWrite | internalMemorySecondReadCycle
            case 6d1: bit(1) // display
            default: bit(1)
        };

    }

    // low-priority devices
    lowPriorityDevicesImmediateReadData = switch (cpu.busWordAddress[27:22]) {
        case 6d0: 24d0 _ keyboardController.busReadData
        case 6d1: 32d0 // GPIO
        case 6d2: signalLogger.busReadData
        default: 32d0
    };
    lowPriorityDevicesImmediateAcknowledge = switch (cpu.busWordAddress[27:22]) {
        case 6d0: bit(1) // keyboard
        case 6d1: bit(1) // GPIO
        case 6d2: signalLogger.busAcknowledge
        default: bit(1)
    };

    // CPU
    cpu.clk = clk;
    cpu.reset = 0;
    cpu.interrupt = 0;

    // display (high prio)
    displayController.clk = clk;
    displayController.busEnable = cpu.busEnable & displaySelected;
    displayController.busWrite = cpu.busWrite;
    displayController.busWordAddress = cpu.busWordAddress[11:0];
    displayController.busWriteData = cpu.busWriteData[7:0];
    r = displayController.r;
    g = displayController.g;
    b = displayController.b;
    hsync = displayController.hsync;
    vsync = displayController.vsync;

    // keyboard (low prio)
    keyboardController.clk = clk;
    keyboardController.ps2clk = ps2clk;
    keyboardController.ps2data = ps2data;
    keyboardController.busEnable = cpu.busEnable & keyboardSelected & ~lowPriorityDevicesDelayCycleRegister;

    // signal logger (low prio)
    signalLogger.logClock = signalLogClock;
    signalLogger.logEnable = signalLogEnable;
    signalLogger.logData = signalLogData;
    signalLogger.busClock = clk;
    signalLogger.busEnable = cpu.busEnable & signalLoggerSelected & ~lowPriorityDevicesDelayCycleRegister;
    signalLogger.busWrite = cpu.busWrite;
    signalLogger.busWordAddress = cpu.busWordAddress[21:0];
    signalLogger.busWriteData = cpu.busWriteData;

    // RAM controller
    ramController.clk = clk;
    ramController.reset = 0;
    ramController.busRequestEnable = cpu.busEnable & cpu.busWordAddress[29];
    ramController.busRequestWordAddress = cpu.busWordAddress[24:0];
    ramController.busRequestWrite = cpu.busWrite;
    ramController.busRequestWriteData = cpu.busWriteData;
    ramController.busRequestWriteMask = cpu.busWriteMask;

}

// small memory: the number indicates the significance inside a word, NOT the position of a byte in a byte buffer (these
// are different since RISC-V is little-endian).
register matrix[4096][8] memory0, memory1, memory2, memory3;
signal vector[32] memoryReadData;
register bit internalMemorySecondReadCycle = 0;
signal vector[12] memoryDataWordAddress = cpu.busWordAddress[11:0];
register vector[8] memoryReadData0, memoryReadData1, memoryReadData2, memoryReadData3;
do (*) memoryReadData = memoryReadData3 _ memoryReadData2 _ memoryReadData1 _ memoryReadData0;
do (clk) {
    memoryReadData0 = memory0[memoryDataWordAddress];
    memoryReadData1 = memory1[memoryDataWordAddress];
    memoryReadData2 = memory2[memoryDataWordAddress];
    memoryReadData3 = memory3[memoryDataWordAddress];
    if (cpu.busEnable & cpu.busWrite & internalMemorySelected) {
        if (cpu.busWriteMask[0]) {
            memory0[memoryDataWordAddress] = cpu.busWriteData[7:0];
        }
        if (cpu.busWriteMask[1]) {
            memory1[memoryDataWordAddress] = cpu.busWriteData[15:8];
        }
        if (cpu.busWriteMask[2]) {
            memory2[memoryDataWordAddress] = cpu.busWriteData[23:16];
        }
        if (cpu.busWriteMask[3]) {
            memory3[memoryDataWordAddress] = cpu.busWriteData[31:24];
        }
    }
    if (cpu.busEnable & ~cpu.busWrite) {
        internalMemorySecondReadCycle = ~internalMemorySecondReadCycle;
    } else {
        internalMemorySecondReadCycle = 0;
    }
}

// delay logic for low-priority devices to reduce timing pressure
do (clk) {
    lowPriorityDevicesReadDataRegister = lowPriorityDevicesImmediateReadData;
    if (cpu.busEnable & lowPriorityDevicesSelected) {
        if (lowPriorityDevicesDelayCycleRegister) {
            lowPriorityDevicesDelayCycleRegister = 0;
        } else {
            lowPriorityDevicesDelayCycleRegister = lowPriorityDevicesImmediateAcknowledge;
        }
    }
}
