module name.martingeisse.esdk.riscv.orange_crab.RiscvTextModeHelloWorld;

interface {
    in clock clk;
    out bit ledRn, ledGn, ledBn;
    out vector[3] r, g, b;
    out bit hsync, vsync;
}

// heartbeat LED
register vector[24] counter = 0;
do (clk) {
    counter = counter + 24d1;
}
do (*) {
    ledRn = counter[23];
    ledGn = 1;
    ledBn = 1;
}

// CPU
name.martingeisse.esdk.riscv.rtl.Multicycle cpu;

// peripherals
name.martingeisse.esdk.riscv.orange_crab.TextDisplayController displayController;

// bus decoder
signal bit internalMemorySelected = cpu.busWordAddress[29:22] == 8d0;
signal bit displaySelected = cpu.busWordAddress[29:22] == 8d1;
signal bit gpioSelected = cpu.busWordAddress[29:22] == 8d3;

// bus / peripherals wiring
do (*) {

    // control interface
    cpu.clk = clk;
    cpu.reset = 0;

    // data interface
    cpu.busReadData = switch (cpu.busWordAddress[28:22]) {
        case 7d0: memoryReadData
        case 7d1: 32d0 // display
        default: 32d0
    };
    cpu.busAcknowledge = switch (cpu.busWordAddress[28:22]) {
        case 7d0: cpu.busWrite | internalMemorySecondReadCycle
        case 7d1: bit(1) // display
        default: bit(1)
    };

    // interrupts
    cpu.interrupt = 0;

    // display
    displayController.clk = clk;
    displayController.busEnable = cpu.busEnable & displaySelected;
    displayController.busWrite = cpu.busWrite;
    displayController.busWordAddress = cpu.busWordAddress[11:0];
    displayController.busWriteData = cpu.busWriteData[7:0];
    r = displayController.r;
    g = displayController.g;
    b = displayController.b;
    hsync = displayController.hsync;
    vsync = displayController.vsync;

}

// small memory: the number indicates the significance inside a word, NOT the position of a byte in a byte buffer (these
// are different since RISC-V is little-endian).
register matrix[4096][8] memory0, memory1, memory2, memory3;
signal vector[32] memoryReadData;
register bit internalMemorySecondReadCycle = 0;
signal vector[12] memoryDataWordAddress = cpu.busWordAddress[11:0];
register vector[8] memoryReadData0, memoryReadData1, memoryReadData2, memoryReadData3;
do (*) memoryReadData = memoryReadData3 _ memoryReadData2 _ memoryReadData1 _ memoryReadData0;
do (clk) {
    memoryReadData0 = memory0[memoryDataWordAddress];
    memoryReadData1 = memory1[memoryDataWordAddress];
    memoryReadData2 = memory2[memoryDataWordAddress];
    memoryReadData3 = memory3[memoryDataWordAddress];
    if (cpu.busEnable & cpu.busWrite & internalMemorySelected) {
        if (cpu.busWriteMask[0]) {
            memory0[memoryDataWordAddress] = cpu.busWriteData[7:0];
        }
        if (cpu.busWriteMask[1]) {
            memory1[memoryDataWordAddress] = cpu.busWriteData[15:8];
        }
        if (cpu.busWriteMask[2]) {
            memory2[memoryDataWordAddress] = cpu.busWriteData[23:16];
        }
        if (cpu.busWriteMask[3]) {
            memory3[memoryDataWordAddress] = cpu.busWriteData[31:24];
        }
    }
    if (cpu.busEnable & ~cpu.busWrite) {
        internalMemorySecondReadCycle = ~internalMemorySecondReadCycle;
    } else {
        internalMemorySecondReadCycle = 0;
    }
}
