module name.martingeisse.esdk.riscv.orange_crab.TextDisplayController;

interface {
    in clock clk;
    in bit busEnable;
    in bit busWrite;
    in vector[12] busWordAddress;
    in vector[8] busWriteData;
    out vector[3] r, g, b;
    out bit hsync, vsync;
}

// stage 1: VGA timing
register vector[10] stage1x, stage1y;
register vector[1] stage1p;
register bit stage1hblank, stage1vblank, stage1hsync, stage1vsync;
do (clk) {
    stage1p = stage1p + 1d1;
    if (stage1p == 1d0) {
        if (stage1x == 10d799) {
            stage1hblank = 0;
            stage1x = 0;
            if (stage1y == 10d524) {
                stage1vblank = 0;
                stage1y = 0;
            } else {
                if (stage1y == 10d479) {
                    stage1vblank = 1;
                } else if (stage1y == 10d489) {
                    stage1vsync = 0;
                } else if (stage1y == 10d491) {
                    stage1vsync = 1;
                }
                stage1y = stage1y + 10d1;
            }
        } else {
            if (stage1x == 10d639) {
                stage1hblank = 1;
            } else if (stage1x == 10d655) {
                stage1hsync = 0;
            } else if (stage1x == 10d751) {
                stage1hsync = 1;
            }
            stage1x = stage1x + 10d1;
        }
    }
}

// stage 2: read character matrix
register bit stage2blank, stage2hsync, stage2vsync;
register matrix[128 * 32][8] characterMatrix = loadMatrix("InitialDisplayContents.txt", 128 * 32, 8);
register vector[8] stage2character;
register vector[3] stage2pixelX;
register vector[4] stage2pixelY;
do (clk) {
    stage2blank = stage1hblank | stage1vblank;
    stage2hsync = stage1hsync;
    stage2vsync = stage1vsync;
    stage2character = characterMatrix[stage1y[8:4] _ stage1x[9:3]];
    stage2pixelX = stage1x[2:0];
    stage2pixelY = stage1y[3:0];
}

// stage 3: read character generator. This should have been a 32k*1 memory but XST crashes on that.
register bit stage3blank, stage3hsync, stage3vsync;
register vector[2] stage3pixels;
register bit stage3pixelSelector;
constant matrix[256 * 16 * 4][2] characterGenerator = loadMatrix("CharacterGenerator.txt", 256 * 16 * 4, 2);
do (clk) {
    stage3blank = stage2blank;
    stage3hsync = stage2hsync;
    stage3vsync = stage2vsync;
    stage3pixels = characterGenerator[stage2character _ stage2pixelY _  stage2pixelX[2:1]];
    stage3pixelSelector = stage2pixelX[0];
}

// stage 4 (non-registered): generate VGA signals
signal bit outputPixel = stage3pixels[stage3pixelSelector ? 1b1 : 1b0] & ~stage3blank;
do (*) {
    r = outputPixel _ 2d0;
    g = outputPixel _ 2d0;
    b = outputPixel _ bit(0) _ ~stage3blank;
    hsync = stage3hsync;
    vsync = stage3vsync;
}

// bus interface (write character matrix)
do (clk) {
    if (busEnable & busWrite) {
        characterMatrix[busWordAddress] = busWriteData;
    }
}
