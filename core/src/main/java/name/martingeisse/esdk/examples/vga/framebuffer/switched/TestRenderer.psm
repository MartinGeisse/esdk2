
CONSTANT DIRECTION_UP, 21
CONSTANT DIRECTION_DOWN, 31
CONSTANT DIRECTION_LEFT, 81
CONSTANT DIRECTION_RIGHT, c1

; initialize row
    LOAD s0, 00
    OUTPUT s0, 40
    LOAD s0, 10
    OUTPUT s0, 40

; initialize column
    LOAD s0, 00
    OUTPUT s0, 10
    LOAD s0, 10
    OUTPUT s0, 10

; draw a rectangle
    LOAD s0, 07
    LOAD s1, DIRECTION_RIGHT
    LOAD s2, 60
    LOAD s3, 00
    CALL horizontalLine
    LOAD s0, 04
    LOAD s1, DIRECTION_DOWN
    LOAD s2, 60
    LOAD s3, 00
    CALL horizontalLine
    LOAD s0, 02
    LOAD s1, DIRECTION_LEFT
    LOAD s2, 60
    LOAD s3, 00
    CALL horizontalLine
    LOAD s0, 01
    LOAD s1, DIRECTION_UP
    LOAD s2, 60
    LOAD s3, 00
    CALL horizontalLine

; enable screen output (cannot write afterwards)
    LOAD s0, 01
    OUTPUT s0, 08

; hang
hang: JUMP hang

; ---------------------------------------------------------------------------------------------------------------------
; routines
; ---------------------------------------------------------------------------------------------------------------------

; Draws a short (< 256 pixels) horizontal line to the right.
;
; s0 - color
; s1 - direction (one of DIRECTION_*)
; s2 - length
;
; moves the cursor one pixel after the end of the line

shortHorizontalLine:
    SUB s2, 01
    RETURN C
    OUTPUT s0, s1
    JUMP shortHorizontalLine

; Draws a horizontal line to the right.
;
; s0 - color
; s1 - direction (one of DIRECTION_*)
; s2 - lower length byte
; s3 - upper length byte
;
; moves the cursor one pixel after the end of the line

horizontalLine:
    CALL shortHorizontalLine
horizontalLine_loop:
    SUB s3, 01
    RETURN C
    LOAD s2, FF
    CALL shortHorizontalLine
    OUTPUT s0, s1
    JUMP horizontalLine_loop
