module name.martingeisse.esdk.experiment.ColorTest;

interface {
    in clock clk;
    in clock ditherClk;
    out bit r, g, b, hsync, vsync;
}

// stage 1
register vector[10] stage1x, stage1y;
register vector[2] stage1p;
register bit stage1hblank, stage1vblank, stage1hsync, stage1vsync;
do (clk) {
    stage1p = stage1p + 2d1;
    if (stage1p == 2d0) {
        if (stage1x == 10d799) {
            stage1hblank = 0;
            stage1x = 0;
            if (stage1y == 10d524) {
                stage1vblank = 0;
                stage1y = 0;
            } else {
                if (stage1y == 10d479) {
                    stage1vblank = 1;
                } else if (stage1y == 10d489) {
                    stage1vsync = 0;
                } else if (stage1y == 10d491) {
                    stage1vsync = 1;
                }
                stage1y = stage1y + 10d1;
            }
        } else {
            if (stage1x == 10d639) {
                stage1hblank = 1;
            } else if (stage1x == 10d655) {
                stage1hsync = 0;
            } else if (stage1x == 10d751) {
                stage1hsync = 1;
            }
            stage1x = stage1x + 10d1;
        }
    }
}

// stage 2
signal bit blanked;
do (*) {
    blanked = stage1hblank | stage1vblank;
}
register vector[2] stage2r, stage2g, stage2b;
register bit stage2hsync, stage2vsync;
do (clk) {
    stage2r = blanked ? 2d0 : stage1x[5:4];
    stage2g = blanked ? 2d0 : stage1y[5:4];
    stage2b = 2d0;
    stage2hsync = stage1hsync;
    stage2vsync = stage1vsync;
}

// dithering stage (has to be last before otuput, because this runs at higher speed)
// dither patterns: 0000, 0101, 1011, 1111
register bit ditherR, ditherG, ditherB, ditherHsync, ditherVsync;
register vector[2] ditherCounter = 0;
do (ditherClk) {
    ditherR = stage2r[1] ? (stage2r[0] | ditherCounter != 2d1) : (stage2r[0] & ditherCounter[0]);
    ditherG = stage2g[1] ? (stage2g[0] | ditherCounter != 2d1) : (stage2g[0] & ditherCounter[0]);
    ditherB = stage2b[1] ? (stage2b[0] | ditherCounter != 2d1) : (stage2b[0] & ditherCounter[0]);
    ditherHsync = stage2hsync;
    ditherVsync = stage2vsync;
    ditherCounter = ditherCounter + 2d1;
}

// output stage
do (*) {
    r = ditherR;
    g = ditherG;
    b = ditherB;
    hsync = ditherHsync;
    vsync = ditherVsync;
}
