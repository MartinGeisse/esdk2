module name.martingeisse.esdk.riscv.rtl.spi.SpiInterface;

interface {
    in clock clk;

    in bit busEnable;
    in bit busWrite;
    in vector[32] busWriteData;
    out bit busAcknowledge;

}

// bus interface
register vector[24] commandWord;
signal bit loadCommandWord = (busEnable & busWrite);
do (*) busAcknowledge = 1;

// SPI connector
name.martingeisse.esdk.riscv.rtl.spi.SpiConnector spiConnector;
register bit dacCs = 1, sck = 1;
do (*) {
    spiConnector.dacCs = dacCs;
    spiConnector.sck = sck;
    spiConnector.mosi = commandWord[23];
}

// SPI logic
register vector[5] completedBits;
do (clk) {
    if (dacCs) {
        if (sck) {

            // idle
            if (loadCommandWord) {
                dacCs = 0;
                sck = 0;
                completedBits = 0;
                commandWord = busWriteData[23:0];
            }

        } else {

            // completing
            sck = 1;

        }
    } else {

        // busy
        if (sck) {
            sck = 0;
            commandWord = commandWord[22:0] _ bit(0);
            completedBits = completedBits + 5d1;
            dacCs = (completedBits[4] & completedBits[3]);
        } else {
            sck = 1;
        }

    }
}
