module name.martingeisse.esdk.riscv.rtl.terminal.PixelDisplayController;

interface {
    in clock clk;

    out vector[24] ramdacWordAddress;
    out bit ramdacEnable;
    in vector[32] ramdacReadData;
    in bit ramdacAcknowledge;

}


//
// stage 1: VGA timing
//

// We need the v signals delayed by one row (compared to stage1y) since the Y position is used to fill the row buffer,
// and that row will be displayed during the *next* monitor beam row. Hence stage1vblankDelayed / stage1vsyncDelayed.
register vector[10] stage1x, stage1y;
register bit stage1p, stage1hblank, stage1vblank, stage1vblankDelayed, stage1hsync, stage1vsync, stage1vsyncDelayed;
do (clk) {
    stage1p = ~stage1p;
    if (stage1p) {
        if (stage1x == 10d799) {
            stage1hblank = 0;
            stage1x = 0;
            stage1vblankDelayed = stage1vblank;
            stage1vsyncDelayed = stage1vsync;
            if (stage1y == 10d524) {
                stage1vblank = 0;
                stage1y = 0;
            } else {
                if (stage1y == 10d479) {
                    stage1vblank = 1;
                } else if (stage1y == 10d489) {
                    stage1vsync = 0;
                } else if (stage1y == 10d491) {
                    stage1vsync = 1;
                }
                stage1y = stage1y + 10d1;
            }
        } else {
            if (stage1x == 10d639) {
                stage1hblank = 1;
            } else if (stage1x == 10d655) {
                stage1hsync = 0;
            } else if (stage1x == 10d751) {
                stage1hsync = 1;
            }
            stage1x = stage1x + 10d1;
        }
    }
}


//
// stage 2: row buffer
//
register matrix[2048][8] rowBuffer;

// read / pixel pipeline
register bit stage2blank, stage2hsync, stage2vsync;
register vector[8] stage2byte;
do (clk) {
    stage2blank = stage1hblank | stage1vblankDelayed;
    stage2hsync = stage1hsync;
    stage2vsync = stage1vsyncDelayed;
    stage2byte = rowBuffer[~stage1y[0] _ stage1x];
}

// refill
register vector[10] refillPointer;
register bit refillInProgress;
do (*) {
    ramdacWordAddress = 4d0 _ stage1y _ refillPointer;
    ramdacEnable = refillInProgress;
}
do (clk) {
    if (refillInProgress) {
        rowBuffer[stage1y[0] _ refillPointer] = ramdacReadData[7:0];
    }
}
do (clk) {
    if (refillInProgress) {
        // if (refillPointer == 10d639) {
        if (refillPointer == 10d64) {
            refillInProgress = 0;
        }
        if (ramdacAcknowledge) {
            refillPointer = refillPointer + 10d1;
        }
    } else {
        // TODO for now we refill vblank lines too, creating unnecessary load on the SDRAM
        // (can probably just use (~stage1vblank & ~stage1hblank), NOT stage1vblankDelayed!
        refillInProgress = ~stage1hblank;
        refillPointer = 0;
    }
}


//
// stage 3 (non-registered): generate VGA signals
//

name.martingeisse.esdk.riscv.rtl.terminal.VgaConnector vgaConnector;
do (*) {
    vgaConnector.r = stage2byte[2] & ~stage2blank;
    vgaConnector.g = stage2byte[1] & ~stage2blank;
    vgaConnector.b = stage2byte[0] & ~stage2blank;
    vgaConnector.hsync = stage2hsync;
    vgaConnector.vsync = stage2vsync;
}
