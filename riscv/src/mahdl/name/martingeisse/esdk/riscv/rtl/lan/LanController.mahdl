module name.martingeisse.esdk.riscv.rtl.lan.LanController;

/*
    Address map:
        0x000000                PHY management I/O register
        0x000004                received-packet consumer control
        0x000008                received-packet length
        0x001000 - 0x0017ff     receive buffer
 */

interface {

    in clock clk;
    in bit reset;

    in bit busEnable, busWrite;
    in vector[22] busWordAddress;
    in vector[32] busWriteData;
    out bit busAcknowledge;
    out vector[32] busReadData;

    out bit mdc, mdioOutWeak;
    in bit mdioIn;

    in bit rxDv, rxClk, rxEr;
    in vector[4] rxd;

}

// bus output signals
register bit busReadSecondCycle;
do (*) {
    if (busWordAddress[10]) {
        busAcknowledge = busReadSecondCycle;
        busReadData = receiveBuffer.readData;
    } else {
        busAcknowledge = 1;
        busReadData = switch (busWordAddress[1:0]) {
            case 2d0: 31d0 _ mdioIn
            case 2d1: 31d0 _ (receiveState == RECEIVE_STATE_CONSUME_PACKET)
            case 2d2: 21d0 _ receivedPacketLengthRegister
            case 2d3: 32d0
        };
    }
}
do (clk) {
    if (busEnable & busWordAddress[10]) {
        busReadSecondCycle = ~busReadSecondCycle;
    } else {
        busReadSecondCycle = 0;
    }
}

// PHY management interface
register bit mdcRegister = 0, mdioOutWeakRegister = 1;
do (*) {
    mdc = mdcRegister;
    mdioOutWeak = mdioOutWeakRegister;
}
do (clk) {
    if (reset) {
        mdcRegister = 0;
        mdioOutWeakRegister = 1;
    } else if (busEnable & busWrite) {
        if (~busWordAddress[10] & busWordAddress[1:0] == 2d0) {
            mdioOutWeakRegister = busWriteData[0];
            mdcRegister = busWriteData[1];
        }
    }
}

// rx_clk edge detector
register bit previousRxClk;
signal bit rxClkRisingEdge;
do (*) {
    rxClkRisingEdge = rxClk & ~previousRxClk;
}
do (clk) {
    previousRxClk = rxClk;
}

// receiver state machine
register vector[3] receiveState;
constant vector[3] RECEIVE_STATE_SKIP_PACKET = 3d0;
constant vector[3] RECEIVE_STATE_IDLE = 3d1;
constant vector[3] RECEIVE_STATE_RECEIVING = 3d2;
constant vector[3] RECEIVE_STATE_APPEND_PADDING = 3d3;
constant vector[3] RECEIVE_STATE_CONSUME_PACKET = 3d4;
do (clk) {
    if (reset) {
        receiveState = RECEIVE_STATE_SKIP_PACKET;
    } else switch (receiveState) {

        case RECEIVE_STATE_SKIP_PACKET:
            receiveBufferPointer = 12d0;
            if (~rxDv) {
                receiveState = RECEIVE_STATE_IDLE;
            }

        case RECEIVE_STATE_IDLE:
            if (rxClkRisingEdge & rxDv) {
                receiveBufferPointer = receiveBufferPointer + 12d1;
                if (rxEr) {
                    receiveState = RECEIVE_STATE_SKIP_PACKET;
                } else {
                    receiveState = RECEIVE_STATE_RECEIVING;
                }
            }

        case RECEIVE_STATE_RECEIVING:
            if (rxClkRisingEdge) {
                receiveBufferPointer = receiveBufferPointer + 12d1;
                if (~rxDv) {
                    receivedPacketLengthRegister = receiveBufferPointer[11:1]; // nibbles to bytes
                    receiveState = RECEIVE_STATE_APPEND_PADDING;
                } else if (rxEr) {
                    receiveState = RECEIVE_STATE_SKIP_PACKET;
                } else {
                    receiveState = RECEIVE_STATE_RECEIVING;
                }
            }

        case RECEIVE_STATE_APPEND_PADDING:
            receiveBufferPointer = receiveBufferPointer + 12d1;
            if (receiveBufferPointer[2:0] == 3d0) {
                receiveState = RECEIVE_STATE_CONSUME_PACKET;
            }

        case RECEIVE_STATE_CONSUME_PACKET:
            if (busEnable & busWrite & ~busWordAddress[10] & busWordAddress[1:0] == 2d1) {
                receiveState = RECEIVE_STATE_SKIP_PACKET; // might happen in the middle of a second packet, so skip
            }

    }
}

// receive buffer
name.martingeisse.esdk.riscv.rtl.lan.ReceiveBuffer receiveBuffer;
register vector[12] receiveBufferPointer;
register vector[11] receivedPacketLengthRegister;
do (*) {
    receiveBuffer.clk = clk;
    receiveBuffer.writeEnable = rxClkRisingEdge & rxDv & (receiveState == RECEIVE_STATE_IDLE |
            receiveState == RECEIVE_STATE_RECEIVING | receiveState == RECEIVE_STATE_APPEND_PADDING);
    receiveBuffer.writeAddress = receiveBufferPointer;
    receiveBuffer.writeData = rxDv ? rxd : 4d0;
    receiveBuffer.readAddress = busWordAddress[8:0];
}




// TODO
do (clk) {
    sendBufferPointer = sendBufferPointer + 12d1;
}

// send buffer
name.martingeisse.esdk.riscv.rtl.lan.SendBuffer sendBuffer;
register vector[12] sendBufferPointer;
do (*) {
    sendBuffer.clk = clk;
    sendBuffer.writeEnable = 0;
    sendBuffer.writeData = 32d0;
    sendBuffer.writeAddress = busWordAddress[8:0];
    sendBuffer.readAddress = sendBufferPointer;
}
