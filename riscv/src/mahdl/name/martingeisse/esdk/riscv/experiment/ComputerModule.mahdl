module name.martingeisse.esdk.riscv.experiment.ComputerModule;

interface {
    in clock clk;
}

name.martingeisse.esdk.riscv.implementation.Multicycle cpu;
signal vector[10] instructionWordAddress;
signal vector[10] memoryDataWordAddress;
signal bit terminalSelected = cpu.memoryWordAddress[12];

// Memory: the number indicates the significance inside a word, NOT the position of a byte in a byte buffer (these
// are different since RISC-V is little-endian).
register matrix[1024][8] memory0, memory1, memory2, memory3;
register vector[32] memoryReadData;
register bit secondReadCycle = 0;

// peripherals
name.martingeisse.esdk.riscv.experiment.terminal.TextDisplayController textDisplay;
name.martingeisse.esdk.riscv.experiment.terminal.KeyboardController keyboard;

do (*) {

    // control interface
    cpu.clk = clk;

    // instruction interface
    instructionWordAddress = cpu.instructionWordAddress[9:0];
    cpu.instruction = memory3[instructionWordAddress] _ memory2[instructionWordAddress] _
            memory1[instructionWordAddress] _ memory0[instructionWordAddress];
    cpu.instructionReadAcknowledge = 1;

    // data interface
    cpu.memoryAcknowledge = cpu.memoryWrite | secondReadCycle;
    memoryDataWordAddress = cpu.memoryWordAddress[9:0];
    cpu.memoryReadData = terminalSelected ? (24d0 _ keyboard.inputData) : memoryReadData;

    textDisplay.clk = clk;
    textDisplay.clockEnable = 1;
    textDisplay.writeEnable = cpu.memoryEnable & cpu.memoryWrite & terminalSelected;
    textDisplay.address = cpu.memoryWordAddress[11:0];
    textDisplay.writeData = cpu.memoryWriteData[7:0];

    keyboard.clk = clk;
    keyboard.inputAcknowledge = cpu.memoryEnable & ~cpu.memoryWrite & terminalSelected;

}

do (clk) {
    if (cpu.memoryEnable & cpu.memoryWrite & ~terminalSelected) {
        if (cpu.memoryWriteMask[0]) {
            memory0[memoryDataWordAddress] = cpu.memoryWriteData[7:0];
        }
        if (cpu.memoryWriteMask[1]) {
            memory1[memoryDataWordAddress] = cpu.memoryWriteData[15:8];
        }
        if (cpu.memoryWriteMask[2]) {
            memory2[memoryDataWordAddress] = cpu.memoryWriteData[23:16];
        }
        if (cpu.memoryWriteMask[3]) {
            memory3[memoryDataWordAddress] = cpu.memoryWriteData[31:24];
        }
    }
    memoryReadData = memory3[memoryDataWordAddress] _ memory2[memoryDataWordAddress] _
            memory1[memoryDataWordAddress] _ memory0[memoryDataWordAddress];
    if (cpu.memoryEnable & ~cpu.memoryWrite) {
        secondReadCycle = ~secondReadCycle;
    } else {
        secondReadCycle = 0;
    }
}

