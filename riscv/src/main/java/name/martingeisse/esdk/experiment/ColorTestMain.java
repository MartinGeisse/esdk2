package name.martingeisse.esdk.experiment;

import name.martingeisse.esdk.core.model.Design;
import name.martingeisse.esdk.core.model.Item;
import name.martingeisse.esdk.core.rtl.RtlClockNetwork;
import name.martingeisse.esdk.core.rtl.RtlRealm;
import name.martingeisse.esdk.core.rtl.module.RtlInstancePort;
import name.martingeisse.esdk.core.rtl.module.RtlModuleInstance;
import name.martingeisse.esdk.core.rtl.pin.RtlInputPin;
import name.martingeisse.esdk.core.rtl.pin.RtlOutputPin;
import name.martingeisse.esdk.core.rtl.signal.RtlBitConstant;
import name.martingeisse.esdk.core.rtl.signal.RtlBitSignal;
import name.martingeisse.esdk.core.rtl.synthesis.verilog.VerilogWriter;
import name.martingeisse.esdk.core.rtl.synthesis.xilinx.ProjectGenerator;
import name.martingeisse.esdk.core.rtl.synthesis.xilinx.XilinxPinConfiguration;
import name.martingeisse.esdk.core.util.vector.VectorValue;

import java.io.File;

/**
 *
 */
public class ColorTestMain {

    public static void main(String[] args) throws Exception {
        Design design = new Design();
        RtlRealm realm = new RtlRealm(design);

        // clk / reset
        RtlModuleInstance clkReset = new RtlModuleInstance(realm, "clk_reset_highspeed");
        clkReset.createBitInputPort("clk_in", clockPin(realm));
        clkReset.createBitInputPort("reset_in", buttonPin(realm, "V16"));
        RtlBitSignal reset = clkReset.createBitOutputPort("reset");
        RtlClockNetwork clk0 = realm.createClockNetwork(withName(clkReset.createBitOutputPort("ddr_clk_0"), "ddr_clk_0"));
        RtlClockNetwork highspeedClk0 = realm.createClockNetwork(withName(clkReset.createBitOutputPort("highspeed_clk_0"), "highspeed_clk_0"));
        RtlClockNetwork highspeedClk180 = realm.createClockNetwork(withName(clkReset.createBitOutputPort("highspeed_clk_180"), "highspeed_clk_180"));

        // main module
        ColorTest colorTest = new ColorTest.Implementation(realm, clk0, highspeedClk0, highspeedClk180);

        // VGA pins.
        // Note that the "first" clock is the clk180 because the color signals generated by the ColorTest module change
        // with the clk0 edge, so the clk180 edge is the first edge to occur after that.
        vgaColorPin(realm, "H14",  highspeedClk180, colorTest.getR1(), highspeedClk0, colorTest.getR2());
        vgaColorPin(realm, "H15",  highspeedClk180, colorTest.getG1(), highspeedClk0, colorTest.getG2());
        vgaColorPin(realm, "G15",  highspeedClk180, colorTest.getB1(), highspeedClk0, colorTest.getB2());
        vgaPin(realm, "F15", colorTest.getHsync(), false);
        vgaPin(realm, "F14", colorTest.getVsync(), false);

        ProjectGenerator projectGenerator = new ProjectGenerator(realm, "ColorTest", new File("ise/color_test"), "XC3S500E-FG320-4");
        projectGenerator.addVerilogFile(new File("riscv/resource/hdl/clk_reset_highspeed.v"));
        projectGenerator.addUcfLine("NET \"pinC9\" PERIOD = 20.0ns HIGH 40%;");
        projectGenerator.addUcfLine("CONFIG PROHIBIT = D2;");
        projectGenerator.addUcfLine("CONFIG PROHIBIT = G4;");
        projectGenerator.addUcfLine("CONFIG PROHIBIT = J6;");
        projectGenerator.addUcfLine("CONFIG PROHIBIT = L5;");
        projectGenerator.addUcfLine("CONFIG PROHIBIT = R4;");
        projectGenerator.generate();
    }

    private static <T extends Item> T withName(T item, String name) {
        item.setName(name);
        return item;
    }

    private static RtlInputPin clockPin(RtlRealm realm) {
        XilinxPinConfiguration configuration = new XilinxPinConfiguration();
        configuration.setIostandard("LVCMOS33");
        RtlInputPin pin = new RtlInputPin(realm);
        pin.setId("C9");
        pin.setConfiguration(configuration);
        return pin;
    }

    private static RtlInputPin buttonPin(RtlRealm realm, String id) {
        XilinxPinConfiguration configuration = new XilinxPinConfiguration();
        configuration.setIostandard("LVTTL");
        configuration.setAdditionalInfo("PULLDOWN");
        RtlInputPin pin = new RtlInputPin(realm);
        pin.setId(id);
        pin.setConfiguration(configuration);
        return pin;
    }

    private static void vgaColorPin(RtlRealm realm,
                                    String id,
                                    RtlClockNetwork firstClock,
                                    RtlBitSignal firstOutputSignal,
                                    RtlClockNetwork secondClock,
                                    RtlBitSignal secondOutputSignal) {

        RtlModuleInstance oddr = new RtlModuleInstance(realm, "ODDR2");
        oddr.getParameters().put("DDR_ALIGNMENT", "NONE");
        oddr.getParameters().put("INIT", VectorValue.of(1, 0));
        oddr.getParameters().put("SRTYPE", "SYNC");
        oddr.createBitInputPort("C0", firstClock.getClockSignal());
        oddr.createBitInputPort("C1", secondClock.getClockSignal());
        oddr.createBitInputPort("CE", true);
        oddr.createBitInputPort("R", false);
        oddr.createBitInputPort("S", false);
        oddr.createBitInputPort("D0", firstOutputSignal);
        oddr.createBitInputPort("D1", secondOutputSignal);
        RtlBitSignal outputDdrBit = oddr.createBitOutputPort("Q");

        RtlModuleInstance iobuf = new RtlModuleInstance(realm, "IOBUF");
        iobuf.getParameters().put("DRIVE", 2);
        iobuf.getParameters().put("IBUF_DELAY_VALUE", "0");
        iobuf.getParameters().put("IFD_DELAY_VALUE", "AUTO");
        iobuf.getParameters().put("IOSTANDARD", "LVTTL");
        iobuf.getParameters().put("SLEW", "SLOW");
        iobuf.createBitInputPort("I", outputDdrBit);
        iobuf.createBitInputPort("T", new RtlBitConstant(realm, false));

        vgaPin(realm, id, iobuf.createBitOutputPort("IO"), true);
    }

    private static void vgaPin(RtlRealm realm, String id, RtlBitSignal outputSignal, boolean lowDrive) {
        XilinxPinConfiguration configuration = new XilinxPinConfiguration();
        configuration.setIostandard("LVTTL");
        configuration.setDrive(lowDrive ? 2 : 8);
        configuration.setSlew(lowDrive ? XilinxPinConfiguration.Slew.SLOW : XilinxPinConfiguration.Slew.FAST);
        RtlOutputPin pin = new RtlOutputPin(realm);
        pin.setId(id);
        pin.setConfiguration(configuration);
        pin.setOutputSignal(outputSignal);
    }

}
